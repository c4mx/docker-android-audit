#!/bin/bash
# Custom change based on:
# https://github.com/Dbof/docker-android-re/blob/master/decompile.sh

set -eu -o pipefail

if [ "$#" -ne 1 ]; then
    echo "Usage: $0 <apk>"
    exit 1
fi

FNAME="${1%.*}"
DISASS_RES_DE="$FNAME/apktool/res_decoded"
DISASS_RES_EN="$FNAME/apktool/res_encoded"
DECOMP="$FNAME/decompiled/jdcli"
DECOMP_JADX="$FNAME/decompiled/jadx"
D2J="$FNAME/d2j/"
UNZIPPED="$FNAME/unzipped"

echo "[+] Unzipping to $UNZIPPED..."
mkdir -p "$FNAME"
mkdir -p "$FNAME/unzipped"
unzip -q "$1" -d "$UNZIPPED"

echo "[+] Running apktool to $DISASS_RES_DE..."
# -f replace previous decompiled apk's code
# -o output directory
# -r ignore the decompiling of resources (to avoid issues in building)
apktool d -f -o "$DISASS_RES_DE" "$1"

echo "[+] Running apktool to $DISASS_RES_EN..."
apktool d -f -r -o "$DISASS_RES_EN" "$1"

mkdir -p "$D2J"
for f in "$UNZIPPED"/classes*.dex; do
    FBASE=$(basename $f)
    FN="${FBASE%.*}"

    echo "[+] Running dex2jar on $f..."
    d2j-dex2jar -f -e /dev/null "$f" -o "$D2J/$FN.jar"
done

echo "[+] Running jdax to $DECOMP_JADX..."
mkdir -p "$DECOMP_JADX"
jadx -r -d "$DECOMP_JADX" "$1"

# Alert: very slow
#echo "[+] Running jd-cli to $DECOMP..."
# mkdir -p "$DECOMP"
#jd-cli -od "$DECOMP" "$D2J/*.jar" &> /dev/null

